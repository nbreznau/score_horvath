{"frames":[{"func":"tab_model(Tbl5_m1, Tbl5_m2, Tbl5_m3, p.style = \"stars\", show.ci = F, \n    show.loglik = T, rm.terms = \"cntry[]\", pred.labels = c(\"k1\", \n        \"k2\", \"k3\", \"k4\", \"Age 30-44\", \"Age 44-59\", \"Age >60\", \n        \"Year 2007\", \"Age 30-44*year'07\", \"Age 44-59*year'07\",  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"purrr::map2(models, 1:length(models), function(model, i) {\n    fam.info <- insight::model_info(model)\n    if (insight::is_multivariate(model)) \n        fam.info <- fam.info[[1]] ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".f(.x[[i]], .y[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tidy_model(model = model, ci.lvl = ci.lvl, tf = transform, type = \"est\", \n    bpe = bpe, robust = list(vcov.fun = vcov.fun, vcov.type = vcov.type, \n        vcov.args = vcov.args), facets = FALSE, show.zeroinf = show.zeroinf, \n    p.val = p.val, bootstrap = bootstrap, iterations = iterations,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"parameters::model_parameters(model, ci = ci.lvl, component = component, \n    bootstrap = bootstrap, iterations = iterations, df_method = df_method, \n    p_adjust = p_adjust)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"model_parameters.polr(model, ci = ci.lvl, component = component, \n    bootstrap = bootstrap, iterations = iterations, df_method = df_method, \n    p_adjust = p_adjust)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".model_parameters_generic(model = model, ci = ci, df_method = df_method, \n    bootstrap = bootstrap, iterations = iterations, merge_by = \"Parameter\", \n    standardize = standardize, exponentiate = exponentiate, robust = robust, \n    p_adjust = p_adjust, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".extract_parameters_generic(model, ci = ci, component = component, \n    merge_by = merge_by, standardize = standardize, effects = effects, \n    robust = robust, df_method = df_method, p_adjust = p_adjust, \n    verbose = verbose, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"suppressMessages(ci(model, ci = ci, effects = effects, component = component, \n    method = df_method, verbose = verbose))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(expr, message = function(c) if (inherits(c, \n    classes)) tryInvokeRestart(\"muffleMessage\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"ci(model, ci = ci, effects = effects, component = component, \n    method = df_method, verbose = verbose)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"ci.polr(model, ci = ci, effects = effects, component = component, \n    method = df_method, verbose = verbose)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(ci, function(i) .ci_profiled2(model = x, ci = i))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".ci_profiled2(model = x, ci = i)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    out <- as.data.frame(stats::confint(model, level = ci), stringsAsFactors = FALSE)\n    names(out) <- c(\"CI_low\", \"CI_high\")\n    out$CI <- ci * 100 ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as.data.frame(stats::confint(model, level = ci), stringsAsFactors = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stats::confint(model, level = ci)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"confint.polr(model, level = ci)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"profile(object, which = parm, alpha = (1 - level)/4, trace = trace)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"profile.polr(object, which = parm, alpha = (1 - level)/4, trace = trace)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"polr.fit(x = Xi, y = Y, wt = W, start = start[-i], offset = o, \n    method = fitted$method)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"optim(s0, fmin, gmin, method = \"BFGS\", ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (par) \ngr(par, ...))(c(`factor(cat_age)2` = -0.554399936412603, `factor(cat_age)3` = -1.02831054319403, \n`factor(cat_age)4` = -0.867192705880631, `factor(wave)2007` = 0.892165050429507, \nfemale = -0.0278458517990286, `factor(education)2` = -0.172500025115434,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"gr(par, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"jacobian(theta)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"argument \"...\" is missing, with no default"}